{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAgB;;AAEZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR,CAHY,CAG+B;AAC3CA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQJ,UAAR;AACH,qBAZD;;AAcAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBALD;AAMH,iBA5BM,CAAP;AA6BH;AAtCL;AAAA;AAAA,0CAwCyBrB,UAxCzB,EAwCqC;;AAE7BH,uBAAOyB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC5CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;;AAEDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAPD;AAQH;AAlDL;AAAA;AAAA,8CAoD6B;;AAErB,oBAAG5B,UAAH,EAAe;;AAEXC;AACAD,iCAAa,IAAb;AACH;AACJ;AA3DL;;AAAA;AAAA;AA6DH,CAvEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n    \n    const stores = ['negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe';\n    \n    var connection = null;\n\n    var close = null;\n    \n    return class ConnectionFactory {\n    \n        constructor() {\n            \n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\n        }\n    \n        static getConnection() {\n            \n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n    \n                openRequest.onupgradeneeded = e => {\n    \n                    ConnectionFactory._createStores(e.target.result);\n                };\n    \n                openRequest.onsuccess = e => {\n    \n                    if(!connection) {\n                        \n                        connection = e.target.result;\n                        close = connection.close.bind(connection); // muda o scopo do close para connection\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        }\n                    }\n    \n                    resolve(connection);\n                };\n    \n                openRequest.onerror = e => {\n    \n                    console.log(e.target.error);\n    \n                    reject(e.target.error.name);\n                };\n            });\n        }\n    \n        static _createStores(connection) {\n            \n            stores.forEach(store => {\n                        \n                if(connection.objectStoreNames.contains(store)) {\n                    connection.deleteObjectStore(store);\n                }\n    \n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n\n        static closeConnection() {\n\n            if(connection) {\n                \n                close();\n                connection = null;\n            }\n        }\n    }\n})();"]}
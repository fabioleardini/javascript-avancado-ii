{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","cb","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","error","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","erro","negocicao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","negociacao","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":";;;;;;IAAMA,iB;AAEF,iCAAc;AAAA;;AAEV,aAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACH;;;;iDAEwBC,E,EAAI;AAAA;;AAEzB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,sBAAKL,KAAL,CACKM,GADL,CACS,oBADT,EAEKC,IAFL,CAEU,uBAAe;AACjBH,4BAAQI,YAAYC,GAAZ,CAAgB;AAAA,+BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,qBAAhB,CAAR;AACH,iBAJL,EAKKC,KALL,CAKW,iBAAS;AACZC,4BAAQC,GAAR,CAAYC,KAAZ;AACAd,2BAAO,iDAAP;AACH,iBARL;AASH,aAXM,CAAP;AAYH;;;yDAEgCH,E,EAAI;AAAA;;AAEjC,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,uBAAKL,KAAL,CACKM,GADL,CACS,sBADT,EAEKC,IAFL,CAEU,uBAAe;AACjBH,4BAAQI,YAAYC,GAAZ,CAAgB;AAAA,+BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,qBAAhB,CAAR;AACH,iBAJL,EAKKC,KALL,CAKW,iBAAS;AACZC,4BAAQC,GAAR,CAAYC,KAAZ;AACAd,2BAAO,0DAAP;AACH,iBARL;AASH,aAXM,CAAP;AAYH;;;0DAEiCH,E,EAAI;AAAA;;AAElC,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,uBAAKL,KAAL,CACKM,GADL,CACS,uBADT,EAEKC,IAFL,CAEU,uBAAe;AACjBH,4BAAQI,YAAYC,GAAZ,CAAgB;AAAA,+BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,qBAAhB,CAAR;AACH,iBAJL,EAKKC,KALL,CAKW,iBAAS;AACZC,4BAAQC,GAAR,CAAYC,KAAZ;AACAd,2BAAO,2DAAP;AACH,iBARL;AASH,aAXM,CAAP;AAYH;;;2CAEkB;;AAEf,mBAAOF,QAAQiB,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,EAIJhB,IAJI,CAIC,oBAAY;;AAEhB,oBAAIC,cAAcgB,SACbC,MADa,CACN,UAACC,KAAD,EAAQC,OAAR;AAAA,2BAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,iBADM,EACqC,EADrC,EAEblB,GAFa,CAET;AAAA,2BAAQ,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASkB,KAAKhB,IAAd,CAAf,EAAoCgB,KAAKf,UAAzC,EAAqDe,KAAKd,KAA1D,CAAR;AAAA,iBAFS,CAAlB;;AAIA,uBAAOP,WAAP;AACH,aAXM,EAWJQ,KAXI,CAWE,gBAAQ;AACb,sBAAM,IAAIc,KAAJ,CAAUC,IAAV,CAAN;AACH,aAbM,CAAP;AAcH;;;iCAEQC,S,EAAW;;AAEhB,mBAAOC,kBACFC,aADE,GAEF3B,IAFE,CAEG;AAAA,uBAAc,IAAI4B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGF7B,IAHE,CAGG;AAAA,uBAAO8B,IAAIC,QAAJ,CAAaC,UAAb,CAAP;AAAA,aAHH,EAIFhC,IAJE,CAIG;AAAA,uBAAM,mCAAN;AAAA,aAJH,EAKFS,KALE,CAKI,iBAAS;AACZC,wBAAQC,GAAR,CAAYC,KAAZ;AACA,sBAAM,IAAIW,KAAJ,CAAU,yCAAV,CAAN;AACH,aARE,CAAP;AASH;;;gCAEO;;AAEJ,mBAAOG,kBACFC,aADE,GAEF3B,IAFE,CAEG;AAAA,uBAAc,IAAI4B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGF7B,IAHE,CAGG;AAAA,uBAAO8B,IAAIG,UAAJ,EAAP;AAAA,aAHH,EAIFxB,KAJE,CAII,iBAAS;AACZC,wBAAQC,GAAR,CAAYC,KAAZ;AACA,sBAAM,IAAIW,KAAJ,CAAU,uCAAV,CAAN;AACH,aAPE,CAAP;AAQH;;;gCAEO;;AAEJ,mBAAOG,kBACFC,aADE,GAEF3B,IAFE,CAEG;AAAA,uBAAc,IAAI4B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGF7B,IAHE,CAGG;AAAA,uBAAO8B,IAAII,UAAJ,EAAP;AAAA,aAHH,EAIFlC,IAJE,CAIG;AAAA,uBAAM,kCAAN;AAAA,aAJH,EAKFS,KALE,CAKI,iBAAS;AACZC,wBAAQC,GAAR,CAAYC,KAAZ;AACA,sBAAM,IAAIW,KAAJ,CAAU,wCAAV,CAAN;AACH,aARE,CAAP;AASH;;;gCAEOY,U,EAAY;;AAEhB,mBAAO,KAAKC,gBAAL,GACFpC,IADE,CACG;AAAA,uBACFC,YAAYoC,MAAZ,CAAmB;AAAA,2BACf,CAACF,WAAWG,IAAX,CAAgB;AAAA,+BACbC,KAAKC,SAAL,CAAeR,cAAcO,KAAKC,SAAL,CAAeC,mBAAf,CAA7B,CADa;AAAA,qBAAhB,CADc;AAAA,iBAAnB,CADE;AAAA,aADH,EAOFhC,KAPE,CAOI,iBAAS;AACZC,wBAAQC,GAAR,CAAYC,KAAZ;AACA,sBAAM,IAAIW,KAAJ,CAAU,mDAAV,CAAN;AACH,aAVE,CAAP;AAWH","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana(cb) {\n\n        return new Promise((resolve, reject) => {\n            \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject('Nao foi possivel obter as negociacoes da semana')\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaAnterior(cb) {\n\n        return new Promise((resolve, reject) => {\n            \n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject('Nao foi possivel obter as negociacoes da semana anterior')\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaRetrasada(cb) {\n\n        return new Promise((resolve, reject) => {\n            \n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject('Nao foi possivel obter as negociacoes da semana retrasada')\n                })\n        });    \n    }\n\n    obterNegociacoes() {\n        \n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n    \n    cadastra(negocicao) {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível adicionar a negociação');\n            });\n    }\n\n    lista() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível obter as negociações');\n            });\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n\n    importa(listaAtual) {\n\n        return this.obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente => \n                        JSON.stringify(negociacao == JSON.stringify(negociacaoExistente)))\n                )\n            )\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível buscar negociações para importar');\n            });\n    }\n}"]}